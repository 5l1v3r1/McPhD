#+TITLE:     notes.org
#+AUTHOR:    Michael Buksas
#+EMAIL:     mb1@buksas.net
#+DATE:      2011-02-19 Sat

* General notes:

** Particle stepping and event generation

   Treat a particle that might be dead as a Maybe Particle? Or make
   Alive/Dead into a monad.

   The only times I need the final complete state of the particle in an
   Event are when it dies. Treat these differently then Events. Fates?

   The life and times of a particle:

   InFlight -> InFlight
   InFlight -> Dead

   I need an event which takes me to the final destination. Then, I need
   to terminate the unfold.

   step :: Stuff -> Particle -> Maybe (Event, Particle)

   Event should be called Step.

   step :: Stuff -> Particle -> Maybe (Step, Particle)

   So, while stepping, I decide the particle is done.

   InFlight --> Dead.

   Here, Step is something like:

   Step = { motion :: Motion , limiter :: Limiter }

   The returned particle from step is Dead.

   The next step operation on the dead particle just returns Nothing.

   step :: _ Dead = Nothing

   So, I get the final Step; Then I stop the unfold.

   Put Events and Fates in the same data structure:

   Step = (Motion, Event | Fate p)

* Deciding what to do to a particle

  On each step:

1. Compute distances to scattering, absorption, escape, etc.
2. Select the shortest distance
3. Streaming the particle this distance.
4. Apply a limiting operation to the particle, based on the result of 2:
   1. Another function to transform the particle. E.g. scatter.
   2. Construct and return the correct Limiter.

   Need a way of labeling limiters aside from the constructors in the Limiter type.

   Something like a pre-event and actual event. Or I could compute the
   _outcome_ of each event as well, and so the Event data would contain
   everything it needed. E.g. momentum deposition.

   Pair each event when computed with it's distance. Then choose the
   winning (shortest) distance and put it's event on the list.

   There's a pair of functions here for each limiter:

   distance_to_limiter :: Environment -> Particle -> Distance
   apply_limiter       :: Environment -> Particle -> (Limiter, Particle)

   What is the environment? Opacity, at least. Make it a parameter?

   Is there a environment for stepping? If I want scatter to be an event
   which applies to random particle, then I need the opacity to compute the distance.

   I need opacity to compute distance to scatter, but not to apply
   it. This is mixing up my seperation between RandomParticle and MeshedParticle.


  | Event         | To Compute Distance | To Apply      | Information Needed in Event |
  |---------------+---------------------+---------------+-----------------------------|
  | Scattering    | Opacity             | Random Sample | Momentum                    |
  | Face crossing | Mesh and Cell       |               | Face/Cell index             |
  | Time step end | Time Step duration  |               | Final Particle              |
  | Absorption    | Energy Weight       |               | Final Particle              |

  So what are the right levels to compose algorithms?

  | Simulates                | Environment | Particle Data             | Events                 |
  |--------------------------+-------------+---------------------------+------------------------|
  | Motion in Space          | Space       | Position, Direction, etc. | None?                  |
  | Motion in Time           | Time Step   | Clock                     | Termination            |
  | Scattering, Absorption   | Opacity     | RandomState               | Scattering, Absorption |
  | Motion in Discrete Space | Mesh        | Cell Index                | Face crossing, Esacpe. |


  What would I like the resulting code to look like?

* Environments and Local Properties

  Assume attributes are constant in space. Then the space properties are given by:

  environment :: Environment -> Particle -> Properties.

  data Properties = { localOpacity :: Opacity,  localTemperature :: Temperature , etc... }

  Properties could even contain geometry of the current cell for distance calculations.

  data Properties = { localOpacity :: Opacity, localCell :: Cell, etc... }

* Local contributions and the Global Tally

  What about the tally?

  data Tally = { Momentum :: MeshVector, Energy :: MeshDouble }  <- Depends on the index range.

  How about parts of the tally?

  data TallyContrib = { Momentum :: Vector, Energy :: Double, Index :: MeshIndex }  <- Depends on the mesh index


** Connecting events to the Tally:

   contribution :: Event -> TallyContrib


** Creating the global tally

   addTally :: Tally -> TallyContrib -> Tally


   tally :: GlobalTally
   computeTally :: [TallyContrib] -> Tally
   computeTally initTally contribs = foldl addTally initTally contribs

* Unfolding versus iterating
** Unfolding

   When all steps can succeed:

   step :: Particle -> (Event, Particle)

   I can't unfold this because I need Maybe (Event, Particle).

   I can have a test on events for final ones:

   is_final :: Event -> Bool

   but unfold works by feeding the resulting particle back into step, so
   I can't apply is_final and decide to return Nothing.

   This is why I need a dead state for the particle.

   Using Maybe:

   ParticleM = Maybe Particle

   step :: Particle -> (Event, Particle)

   stepM :: Maybe Particle -> Maybe (Event, Particle)
   stepM Just p = Just $ step p
   stepM Nothing = Nothing

   stepM = liftM step  ??

** Iterating

   (Event, Particle) -> (Event, Particle)

   can be iterated, provided I add an inital event, like "Born"

* Generating and Using Random quantities:
** Generating data types

   I've defined Var = UnitInterval Double in Numerics.hs

   With each new data type define a function like:

   =generateFoo :: Var -> Foo=.

   This converts variants into Foos. Some will require more than one:

   =generateBar :: Var -> Var -> Bar=,

   e.g. a Normalized 3-Vector will require 2 variants.

** Sampling data types

   Elsewhere, define sampling functions like:

   =sampleFoo :: PureMT -> (Foo, PureMT)=

   These will all be pretty similar, since they generate one or more
   Variants and call the appropiate generate function and return the
   new PureMT.

** Arbitrary instances

   The generateX functions should also be useful for defining Arbitrary instances.

* Problematic instance declarations

  The instance declerations in Normalized values don't fit well with
  the type system. E.g.

  instance Vector a => Mag a where ...

  Can't be disambiguated in the presence of other declerations like:

  instance (Normalized Vector a) => Mag a.

  and

  instance (RealFloat a) => Mag a

  GHC won't backtrack to determine which is the correct "parent" class.

**  Andres' comments from the code, with suggestions

    Generally, you should try to avoid instances of the form

    instance A a => B a where ...

    They're almost always a sign that something isn't modelled
    suitably for the Haskell class system.

    I can see several options to work around it; not all of them are
    adequate in every situation. Here are a few:

    (1) If the above definitions are the only ones that you want, then
    it's better not to define a class Mag at all, but instead just
    define three functions, such as:

    normalize :: RealFloat a => a -> Normalized a
    ...

    with the definitions given above. But this does not seem to be the case
    here.

    (2) You can wrap the types to help the type checker:

    newtype NormFloat  a = NormFloat  a
    newtype NormVector a = NormVector a
    instance RealFloat a => Mag (NormFloat a)  where ...
    instance Vector a    => Mag (NormVector a) where ...

    This will disambiguate the situation for the type checker, and
    avoid the need for overlapping instances, but it will make the use
    of the code less pleasant.

    (3) If the classes have a limited number of instances you're
    interested in, you can specialize the instance declaration to the
    ground types rather than the global form. This is what you've done
    for RealFloat/Double, but not for Vector.

    (4) You might consider changing the class hierarchy. You could
    make Double an instance of the Vector class and then use solution
    (1). That should work.  That being said, turning a Double into a
    V1 is a single constructor application.  You might even be able to
    do without the instance for Double ...

    ...

    As I said above, such instances are problematic. GHC never
    considers the part left of the => when picking an instance. So in
    principle, this declaration says "everything is in Mag, try to
    find out later that everything's a vector too". In particular,
    something like

    instance A a => C a
    instance B a => C a

    will never work. GHC will not look which of A or B hold in order
    to choose the instance.

* Ideas
** Using Particles as random generators

   When we move to using random generators through a typeclass
   interface, make particles instances as well. This will capture the
   common pattern of extracting the rng, creating the sample, and
   returning the modified particle along with the sampled result.

** Convert Particle into a state monad.

   Many, many functions involve 'threading state' where the state is
   the particle.

** Unify the absorption and scattering functions.

   Use a single model function for particles interacting with the
   medium. It's possible to combine the opacities (simple addition?)
   and then select which kind of event occurred.

   mediumInteraction :: Model -> Particle -> Outcome

   Inside the Outcome is the event, containing momemtum/energy
   deposition, the new particle, and the distance travelled.

* Techniques:
** Importing

   Importing a constructor which overloads a local one, without
   qualifying the entire imported module:

   import qualified Space.Classes as Space
   import Space.Classes as Space hiding (Motion)

** Typeclasses

   Take a look at [[file:Particle/Classes.hs::class%20Particle%20p%20where][this typeclass]] and this [[file:MiniApp/Particle.hs::instance%20(Mesh%20m)%20%3D>%20P.Particle%20(Particle%20m)%20where][instantiation]]. Notice that
   there is no need for the mesh context in the class definition, even
   though it appears in the instance. I've been thinking about this
   all wrong. The parameters don't propagate.

* Lessons learned about abstraction and type classes
** Parametric polymorphism versus type classes and type families.

   Prefer parametric polymorphism to type classes. Type classes make
   sense when you really need the overloaded functions that it
   defines. For data types which are not unified bt a type class, but
   have similar functions, create and provide these function to where
   they are used.

   This is vaguely analgous to using a C++ template class which is
   completely generic with respect to the parameter, like
   std::vector. Roughly, we want a type-class when we want automatic
   overloading over many potential types. (Of course, C++ supports
   overloading at the function level as well.) 

   The other use for templates in C++ is code generation, where we
   design templates for specialization over a known (but extensible)
   collection of types. In a functional programming language, it is
   easier (and more logical) to define and use seperate functions,
   passing them as arguments as needed. Using C++ templates this way
   is a method to perform functional composition in a language which
   otherise doesn't support it.

   An example that comes to mind is supplying a step method for
   individual particle data types. A step function could be created for
   each data type and passed along as needed.

** Getting the right members of a type family.

   Consider the case of momentum (as implemented in the code at 13
   June 2011). Momentum is a property of the space, because it is a
   vector quantity. It isn't independent of the family member for
   direction, however. 

   If we add it as another member of the type family, or in terms of
   another member such as a genereralized vector for the space,
   problems arise with type deduction. E.g. computations involving the
   momemtum type will also involve the direction type, so conversions
   are necessary between these types which need to be writter
   seperately for each data type.

   Trying to write a general momentum type takes hampers us with a
   lack of flexibility where we need it. For example, defining
   momentum as direction, plus a scalar for mass, gives a new
   representation of vectors for which I don't have operators defined,
   like I do for the standard AC-vector or other vector types.

   There is also the issue of what concepts to include where. For
   example, is momentuem really a property of the space at all? Should
   it be defined on a model by model basis, despite being a universal
   concept for wide classes of problems?

* Directory and file structure

  I've adopted a common pattern for many of the sub-directories:

  source/
  - Foo/
    - Classes.hs
    - InstanceA.hs
    - InstanceB.hs
    - Test/
      - Arbitrary.hs   -- Arbitrary instances for Foo data. Maybe split on data types.
      - InstanceA_arbitrary.hs
      - InstanceA_test.hs  -- Tests for each data type
      - InstanceB_test.hs
        
* Questions                                                        :QUESTION:
** What's the right functional description of scattering?               :TIM:

   scatteringOp :: Model -> Particle -> (Momentum, Energy, Particle)

   Computes the new particle along with deposited Momentum and
   Energy. Model provides parameters needed in computation.

** Is energy weight really just a significance weight?                  :TIM:

   After all, it is applied to momemtum quantities as well.
* Tasks:
** DONE Make indices for Cartesian3D and Spherical meshes into Ix instances.
   CLOSED: [2011-05-05 Thu 16:53]
   :LOGBOOK:
   - State "DONE"       from "TODO"       [2011-05-05 Thu 16:53]
   :END:
** DONE Convert lists in mesh types to arrays.
   CLOSED: [2011-05-05 Thu 16:53]
   :LOGBOOK:
   - State "DONE"       from "TODO"       [2011-05-05 Thu 16:53]
   :END:
** DONE Complete Cartesian1D mesh interface
   CLOSED: [2011-05-13 Fri 15:11]
   :LOGBOOK:
   - State "DONE"       from "TODO"       [2011-05-13 Fri 15:11]
   :END:
** DONE Replace data type and streaming op for Spherical1D.
   CLOSED: [2011-05-16 Mon 09:51]
   :LOGBOOK:
   - State "DONE"       from "TODO"       [2011-05-16 Mon 09:51]
   :END:
** DONE Add distance-to-face to Spherical1D mesh.
   CLOSED: [2011-05-27 Fri 17:29]
   :LOGBOOK:
   - State "DONE"       from "TODO"       [2011-05-27 Fri 17:29]
   :END:
** DONE Implement basic streaming [2/2]
   CLOSED: [2011-05-27 Fri 17:29]
   :LOGBOOK:
   - State "DONE"       from "TODO"       [2011-05-27 Fri 17:29]
   :END:
   - Use the general data types for particle, mesh and space.
   - [X] Copy Tim's event structure
   - [X] Copy Tim's approach to streaming via recursion and termination
** DONE Add a material property data type.
   CLOSED: [2011-05-27 Fri 17:29]
   :LOGBOOK:
   - State "DONE"       from "TODO"       [2011-05-27 Fri 17:29]
   :END:
** DONE [#A] Check physics of events with Tim.
   CLOSED: [2011-06-04 Sat 00:18]
   :LOGBOOK:
   - State "WAITING"    from "TODO"       [2011-05-31 Tue 10:08] \\
     Sent email to Tim about momentum and energy quantites.
   :END:
   Where to use energy versus energy weight.

   - In [[file:~/work/Projects/HaskellIMC/source/basic/src/MC.hs::collEvent%20dCol%20(dp%20omega')%20(Energy%20$%20nrg%20*%20w)][MC.hs]] he uses weight * energy when creating a collision event.
   - What about momentum? This is computed [[file:~/work/Projects/HaskellIMC/source/basic/src/MC.hs::dp%20%3D%20elasticScatterMomDep%20e%20omega][here]], using the energy of the particle.
   - Function [[file:~/work/Projects/HaskellIMC/source/basic/src/Collision.hs::sampleCollision%20::%20Cell%20->%20Energy%20->%20Direction%20->%20Sigma.Lepton%20-][sampleCollision]] return an Event.
** TODO [#A] Add isotropic scattering operation.
** TODO [#A] MiniApp [1/6]
*** DONE Convert Motion/Limiter event model to treating motion as an event.
    CLOSED: [2011-05-31 Tue 10:22]
    :LOGBOOK:
    - State "DONE"       from "TODO"       [2011-05-31 Tue 10:22]
    :END:
*** TODO [#A] Add outcome creators for [3/4]                           :NEXT:
    - [X] End of time step
    - [ ] Mesh/Cell crossing
    - [X] Scattering
    - [X] Absorption
*** TODO [#A] Create a 'Model' containing data and contractor function :: Model -> Particle -> Candidate [1/3]
    Tuesday, June 7, 2011: Changed to just providing contractor
    functions for use in generic step function
    - [X] Model data type
    - [ ] Candidate functions
    - [ ] Change to use general step function in MonteCarlo.
      Waiting on [[*%5B#A%5D%20Add%20outcome%20creators%20for%20%5B1/3%5D][Add outcome creators]]
*** TODO [#A] Add a Tally Type
** TODO [#B] Property and unit tests for distance-to-face calculations
** TODO [#C] Add distance-to-face to Cartesian3D mesh.
** TODO [#B] Merge Properties and Model.Physics files.
** TODO [#A] Add a tally fold operation
** TODO [#A] Add Function to source and generate multiple particles.
** TODO [#C] Derive inequalities for distance-to-face in Spherical1D.
** TODO [#C] Convert Properties to use Positive or Non-negative values where possible.
** TODO [#C] Replace "variant" with "deviant" in function names and comments.
** TODO [#B] Move Mag class out of NormalizedValues to where both N.V. and Properties can use it.
** TODO [#C] Add 'fromList' or other builder functions to mesh classes.

 7.7.2.3 of the GHC User Guide

[[http://www.haskell.org/ghc/docs/7.0.3/html/users_guide/type-families.html#id636192][Equality type constraints]]

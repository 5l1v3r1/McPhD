module MonteCarlo where
{- | Take application-specific stepping functions, particle event and tally
data and combine them into a Monte Carlo simulation.
-}

import Data.Function
import Data.Monoid

import Properties

-- | Outcomes are a distance to an event, the event and the next
-- particle state. These are generated by each contractor, and the
-- 'winner' is selected for each step.
data Outcome e p = Outcome {
  distance   :: !Distance   -- ^ Strict, becuase we use it to select winners.
  , event    :: e
  , particle :: p
  }

-- We compare outcomes strictly on the basis of distance.
instance Eq (Outcome e p) where
  (==) = (==) `on` distance

instance Ord (Outcome e p) where
  compare = compare `on` distance

-- | Contractors are functions which take a model, a particle and
-- return a candidate Outcome for stepping the particle.
type Contractor model event particle
    = model -> particle -> Outcome event particle

-- | Compute outcomes from contractors, and choose the closest one.
step :: model
     -> [Contractor model event particle]
     -> particle
     -> Outcome event particle
step model contractors particle
    = minimum (map (\f -> f model particle) contractors)


-- | Stream a single particle:
stream :: (p -> Outcome e p) -- ^ Function to produce each step. Comes from a model.
          -> (e -> Bool)     -- ^ Check for terminal events to stop streaming
          -> p               -- ^ Initial particle
          -> [Outcome e p]   -- ^ Resulting list of events and particle states.

stream step continue p = next p
  where next p =
          let outcome@(Outcome _ e p') = step p
          in  outcome : if continue e then next p' else []


-- | A helper function for collapsing Monoid tallies.
monoidTally :: (Monoid t) => (d -> t) -> [d] -> t
monoidTally toTally datums = mconcat (map toTally datums)


-- | This is the top-level structure of the Monte Carlo algorithm.
simulate :: (p->tc) -> (t->tc->t) -> t -> [p] -> t
simulate makeTally -- ^ Maps particles to a tally contribution
         foldTally -- ^ Combines tally contibutions with a complete tally
         initTally -- ^ Initial value of the tally
         particles -- ^ A list of particles
             = foldl foldTally initTally (map makeTally particles)
